task generateBuildSignature {
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                workingDir '/'
                commandLine 'sh', '-c', "cd ${KEYTOOL_LOCATION} && " +
                        "keytool -list -v -keystore ${KEYSTORE_LOCATION} -alias ${ALIAS} -storepass ${PASSWORD}"
                standardOutput = os
            }
            ext.keytoolOutput = os.toString()
        }
        //apk
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                workingDir '/'
                commandLine 'sh', '-c', "cd ${KEYTOOL_LOCATION} && " +
                        "keytool -list -printcert -jarfile ${APK_LOCATION}"
                standardOutput = os
            }
            ext.apkOutput = os.toString()
        }

        def keytoolLines = ext.keytoolOutput.split('\n')
        def keystore_sha1 = keytoolLines[11]

        def apkLines = ext.apkOutput.split('\n')
        def apk_sha1 = apkLines[10]

        if(keystore_sha1 == apk_sha1) {
            println("\nSHA1 Fingerprint's MATCH")
        }
        else {
            println("\nError: SHA1 Fingerprint does NOT match")
            println("Keytool: " + keystore_sha1)
            println("APK: " + apk_sha1)
        }

//        ant.propertyfile(
//                file: "${buildDir}/buildsignature.properties",
//                comment: "This file is automatically generated - DO NOT EDIT!") {
//            entry(key: "version", value: "${project.version}")
//            entry(key: "buildTimestamp", value: "${new Date().format('yyyy-MM-dd HH:mm:ss z')}")
//            entry(key: "keystore_sha1", value: "${keystore_sha1}")
//            entry(key: "apk_sha1", value: "${apk_sha1}")
//        }
    }
}
